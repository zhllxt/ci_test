name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE_DEBUG: Debug
  BUILD_TYPE_RELEASE: Release
  CXX_STANDARD_17: 17
  CXX_STANDARD_20: 20

jobs:
  #ubuntu-release-cpp17:
  #  # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #  # You can convert this to a matrix build if you need cross-platform coverage.
  #  # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #  runs-on: ubuntu-latest
  #
  #  steps:
  #  - uses: actions/checkout@v3
  #
  #  - name: Configure CMake
  #    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #    run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE_DEBUG}} -DCMAKE_CXX_STANDARD=${{env.CXX_STANDARD_17}}
  #
  #  - name: Build
  #    # Build your program with the given configuration
  #    run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE_DEBUG}}
  #
  #  - name: Test
  #    working-directory: ${{github.workspace}}/build
  #    # Execute tests defined by the CMake configuration.
  #    # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #    run: ctest -C ${{env.BUILD_TYPE_DEBUG}}
  #
  #macos-release-cpp17:
  #  # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #  # You can convert this to a matrix build if you need cross-platform coverage.
  #  # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #  runs-on: macos-latest
  #
  #  steps:
  #  - uses: actions/checkout@v3
  #
  #  - name: Configure CMake
  #    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #    run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE_DEBUG}} -DCMAKE_CXX_STANDARD=${{env.CXX_STANDARD_17}}
  #
  #  - name: Build
  #    # Build your program with the given configuration
  #    run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE_DEBUG}}
  #
  #  - name: Test
  #    working-directory: ${{github.workspace}}/build
  #    # Execute tests defined by the CMake configuration.
  #    # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #    run: ctest -C ${{env.BUILD_TYPE_DEBUG}}
  #
  #windows-release-cpp17:
  #  # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  #  # You can convert this to a matrix build if you need cross-platform coverage.
  #  # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #  runs-on: windows-latest
  #
  #  steps:
  #  - uses: actions/checkout@v3
  #
  #  - name: Configure CMake
  #    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #    # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #    #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE_DEBUG}} -DCMAKE_CXX_STANDARD=${{env.CXX_STANDARD_17}}
  #    run: cmake -G "MinGW Makefiles" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE_DEBUG}} -DCMAKE_CXX_STANDARD=${{env.CXX_STANDARD_17}}
  #
  #  - name: Build
  #    # Build your program with the given configuration
  #    run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE_DEBUG}}
  #
  #  - name: Test
  #    working-directory: ${{github.workspace}}/build
  #    # Execute tests defined by the CMake configuration.
  #    # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
  #    run: ctest -C ${{env.BUILD_TYPE_DEBUG}}  
 
  windows-clangcl-cpp20:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE_DEBUG}} -DCMAKE_CXX_STANDARD=${{env.CXX_STANDARD_17}}
      run: cmake -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE_RELEASE}} -DCMAKE_CXX_STANDARD=${{env.CXX_STANDARD_20}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE_DEBUG}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE_DEBUG}}  
     
